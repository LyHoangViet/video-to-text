import os
import boto3
import base64
import json
import streamlit as st
from botocore.exceptions import ClientError
from PIL import Image
import io
import enum
import pandas as pd

# Import t·ª´ module video_processor
from video_processor import VideoProcessor

st.set_page_config(
    page_title="Ph√¢n T√≠ch Video/·∫¢nh S·∫£n Ph·∫©m V·ªõi Bedrock",
    page_icon="üîç",
    layout="wide"
)

# Khai b√°o m·∫∑c ƒë·ªãnh cho prompt v√† c√°c th√¥ng s·ªë model
DEFAULT_PROMPT = """# üß† H∆∞·ªõng D·∫´n Ph√¢n T√≠ch S·∫£n Ph·∫©m Vinamilk T·ª´ C√°c Frame ·∫¢nh C·∫Øt T·ª´ Video Quay K·ªá H√†ng

## üéØ M·ª•c Ti√™u

B·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch h√¨nh ·∫£nh t·ª´ video. Nhi·ªám v·ª• c·ªßa b·∫°n l√† nh·∫≠n di·ªán, ph√¢n lo·∫°i v√† tr√≠ch xu·∫•t th√¥ng tin chi ti·∫øt v·ªÅ c√°c s·∫£n ph·∫©m Vinamilk xu·∫•t hi·ªán trong c√°c h√¨nh ·∫£nh (frame) ƒë∆∞·ª£c c·∫Øt t·ª´ m·ªôt video quay k·ªá tr∆∞ng b√†y s·∫£n ph·∫©m (chai, h·ªôp, khay...).

‚ùóÔ∏èL∆∞u √Ω ƒë·∫∑c bi·ªát:  
Do d·ªØ li·ªáu ƒë·∫ßu v√†o l√† c√°c frame ·∫£nh li√™n ti·∫øp t·ª´ video, c√≥ kh·∫£ nƒÉng cao c√°c s·∫£n ph·∫©m s·∫Ω xu·∫•t hi·ªán l·∫∑p l·∫°i ·ªü nhi·ªÅu frame. V√¨ v·∫≠y b·∫°n c·∫ßn √°p d·ª•ng k·ªπ thu·∫≠t nh·∫≠n di·ªán tr√πng l·∫∑p (duplicate detection) ƒë·ªÉ:

- ‚úÖ Kh√¥ng ƒë·∫øm tr√πng s·∫£n ph·∫©m ƒë√£ xu·∫•t hi·ªán ·ªü c√°c frame tr∆∞·ªõc.
- ‚úÖ Ch·ªâ ƒë·∫øm m·ªói s·∫£n ph·∫©m Vinamilk m·ªôt l·∫ßn n·∫øu m·∫∑t tr∆∞·ªõc ƒë√£ ƒë∆∞·ª£c nh√¨n r√µ t·ª´ tr∆∞·ªõc ƒë√≥.

---

## üîß Ti·ªÅn X·ª≠ L√Ω ·∫¢nh (B·∫ÆT BU·ªòC TH·ª∞C HI·ªÜN TR∆Ø·ªöC)

Tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu ph√¢n t√≠ch, ph·∫£i th·ª±c hi·ªán c√°c b∆∞·ªõc x·ª≠ l√Ω ·∫£nh sau:

1. üåÄ Xoay ·∫£nh ƒë√∫ng chi·ªÅu: m·∫∑t tr∆∞·ªõc s·∫£n ph·∫©m h∆∞·ªõng ra ngo√†i.
2. üåó C√¢n b·∫±ng ƒë·ªô s√°ng v√† t∆∞∆°ng ph·∫£n ƒë·ªÉ c·∫£i thi·ªán kh·∫£ nƒÉng ƒë·ªçc nh√£n.
3. üîç Ph√≥ng to v√πng ch·ª©a ch·ªØ tr√™n s·∫£n ph·∫©m ƒë·ªÉ d·ªÖ ph√¢n t√≠ch.
4. ‚öôÔ∏è TƒÉng ƒë·ªô s·∫Øc n√©t n·∫øu ·∫£nh b·ªã m·ªù ho·∫∑c out n√©t.

---

## üìå Nhi·ªám V·ª• Ph√¢n T√≠ch N·ªôi Dung

1. ‚úÖ ƒê·∫øm t·ªïng s·ªë s·∫£n ph·∫©m Vinamilk c√≥ m·∫∑t tr∆∞·ªõc r√µ r√†ng.  
   - ‚ùå Kh√¥ng ƒë·∫øm s·∫£n ph·∫©m ch·ªâ th·∫•y m·∫∑t b√™n ho·∫∑c m·∫∑t sau.  
   - ‚ùóÔ∏èKh√¥ng ƒë·∫øm tr√πng s·∫£n ph·∫©m ƒë√£ th·∫•y ·ªü c√°c frame tr∆∞·ªõc.

2. üè∑Ô∏è Ph√¢n lo·∫°i d√≤ng s·∫£n ph·∫©m Vinamilk  
   - V√≠ d·ª•: s·ªØa t∆∞∆°i, s·ªØa chua, s·ªØa b·ªôt, s·ªØa ƒë·∫∑c...  
   - ‚ö†Ô∏è N·∫øu c√πng lo·∫°i nh∆∞ng kh√°c m√†u bao b√¨ ‚Üí t√°ch th√†nh d√≤ng ri√™ng bi·ªát  

3. üì¶ ƒê·∫øm s·ªë stack (h√†ng ngang d∆∞·ªõi c√πng c·ªßa m·ªói d√≤ng s·∫£n ph·∫©m)  
   - Kh√¥ng t√≠nh s·∫£n ph·∫©m ·ªü ph√≠a sau ho·∫∑c b·ªã khu·∫•t.

4. üí∞ Tr√≠ch xu·∫•t gi√° g·ªëc  
   - Gi√° th∆∞·ªùng nh·ªè h∆°n, b·ªã g·∫°ch ngang.

5. üíµ Tr√≠ch xu·∫•t gi√° khuy·∫øn m√£i  
   - Gi√° th∆∞·ªùng to h∆°n, in ƒë·∫≠m h∆°n gi√° g·ªëc.

6. üóìÔ∏è Tr√≠ch xu·∫•t th·ªùi gian khuy·∫øn m√£i  
   - D·∫°ng: `DD/MM‚ÄìDD/MM/YYYY`, n·∫±m g·∫ßn khu v·ª±c gi√°.

7. üé® M√¥ t·∫£ m√†u s·∫Øc bao b√¨  
   - Bao g·ªìm: M√†u ch√≠nh (primary) v√† m√†u ph·ª• (secondary).

---

## üì§ K·∫øt Qu·∫£ Tr·∫£ V·ªÅ (CH·ªà D∆Ø·ªöI D·∫†NG JSON)

> M·ªói s·∫£n ph·∫©m l√† m·ªôt ph·∫ßn t·ª≠ trong m·∫£ng JSON.

C·∫•u tr√∫c m·∫´u:

```json
[
  {
    "label_name": "Vinamilk Flex ƒë·ªè tr·∫Øng",
    "total_stacks": 4,
    "product_detail": "1L, Vinamilk, s·ªØa t∆∞∆°i ti·ªát tr√πng, √≠t b√©o",
    "origin_price": "34.000ƒë",
    "discount_price": "29.500ƒë",
    "promotion_period": "10/05‚Äì15/05/2025"
  },
  {
    "label_name": "Vinamilk ADM xanh tr·∫Øng",
    "total_stacks": 3,
    "product_detail": "110ml, Vinamilk, s·ªØa chua u·ªëng, b·ªï sung vitamin A+D+M",
    "origin_price": "18.000ƒë",
    "discount_price": "15.000ƒë",
    "promotion_period": "01/05‚Äì10/05/2025"
  }
]
```

## ‚ö†Ô∏è L∆∞u √ù B·∫Øt Bu·ªôc

- ‚ùóÔ∏è B·∫°n c·∫ßn x·ª≠ l√Ω v√† lo·∫°i b·ªè c√°c s·∫£n ph·∫©m b·ªã tr√πng l·∫∑p gi·ªØa c√°c frame do video c·∫Øt th√†nh nhi·ªÅu ·∫£nh li√™n ti·∫øp.
  - S·ª≠ d·ª•ng c∆° ch·∫ø nh·∫≠n di·ªán h√¨nh ·∫£nh ho·∫∑c v·ªã tr√≠ (ho·∫∑c hashing ·∫£nh) ƒë·ªÉ ph√°t hi·ªán tr√πng l·∫∑p.
  - ∆Øu ti√™n ƒë·∫øm s·∫£n ph·∫©m trong frame ƒë·∫ßu ti√™n m√† s·∫£n ph·∫©m ƒë√≥ xu·∫•t hi·ªán r√µ r√†ng.
- ‚úÖ Ch·ªâ ƒë·∫øm c√°c s·∫£n ph·∫©m Vinamilk c√≥ m·∫∑t tr∆∞·ªõc ƒë∆∞·ª£c nh√¨n th·∫•y r√µ r√†ng.
- ‚úÖ C√πng m·ªôt s·∫£n ph·∫©m nh∆∞ng kh√°c m√†u bao b√¨ ‚Üí t√≠nh l√† d√≤ng s·∫£n ph·∫©m ri√™ng bi·ªát.
- ‚úÖ N·∫øu m·ªôt s·∫£n ph·∫©m xu·∫•t hi·ªán ·ªü nhi·ªÅu frame ‚Üí ch·ªâ ƒë·∫øm 1 l·∫ßn duy nh·∫•t.
- ‚ùå Kh√¥ng ƒë·∫øm s·∫£n ph·∫©m b·ªã khu·∫•t, m·ªù, ho·∫∑c ch·ªâ th·∫•y m·ªôt ph·∫ßn b√™n h√¥ng hay m·∫∑t sau.
- üö´ Kh√¥ng th√™m b·∫•t k·ª≥ n·ªôi dung gi·∫£i th√≠ch n√†o ngo√†i JSON ƒë·∫ßu ra.
- ‚öôÔ∏è JSON tr·∫£ v·ªÅ ph·∫£i h·ª£p l·ªá ho√†n to√†n: ƒë√∫ng c·∫•u tr√∫c, ƒë√∫ng ƒë·ªãnh d·∫°ng ki·ªÉu d·ªØ li·ªáu, kh√¥ng thi·∫øu tr∆∞·ªùng.
"""

DEFAULT_TEMPERATURE = 0.01
DEFAULT_TOP_P = 0.2
DEFAULT_TOP_K = 100
DEFAULT_MAX_TOKENS = 10000
DEFAULT_REGION = "us-east-1" 

class ModelType(str, enum.Enum):
    NOVA = "Nova Premier"
    CLAUDE_3_7_SONNET = "Claude 3.7 Sonnet"
    CLAUDE_4_SONNET = "Claude 4 Sonnet"
    CLAUDE_4_OPUS = "Claude 4 Opus"

class InputType(str, enum.Enum):
    VIDEO = "Video"
    IMAGE = "H√¨nh ·∫£nh"

def get_model_id(model_type: ModelType) -> str:
    """
    Tr·∫£ v·ªÅ model ID t∆∞∆°ng ·ª©ng v·ªõi lo·∫°i model ƒë∆∞·ª£c ch·ªçn
    
    Args:
        model_type: Lo·∫°i model ƒë∆∞·ª£c ch·ªçn
        
    Returns:
        Model ID string cho AWS Bedrock
    """
    model_ids = {
        ModelType.NOVA: "us.amazon.nova-premier-v1:0",
        ModelType.CLAUDE_3_7_SONNET: "us.anthropic.claude-3-7-sonnet-20250219-v1:0",
        ModelType.CLAUDE_4_SONNET: "us.anthropic.claude-sonnet-4-20250514-v1:0",
        ModelType.CLAUDE_4_OPUS: "us.anthropic.claude-opus-4-20250514-v1:0"
    }
    return model_ids[model_type]

def detect_image_type(file_name: str) -> str:
    """
    Detects the image MIME type based on file extension.
    
    Args:
        file_name: Name of the image file
        
    Returns:
        MIME type string for the image
    """
    extension = os.path.splitext(file_name)[1].lower()
    
    mime_types = {
        ".jpg": "jpeg",
        ".jpeg": "jpeg",
        ".png": "png",
        ".gif": "gif",
        ".webp": "webp",
        ".bmp": "bmp"
    }
    
    return mime_types.get(extension, "jpeg")

def image_to_base64(image, image_name="image.jpg"):
    """
    Chuy·ªÉn ƒë·ªïi ·∫£nh (PIL Image ho·∫∑c numpy array) th√†nh chu·ªói base64.
    
    Args:
        image: ·∫¢nh d·∫°ng PIL Image ho·∫∑c numpy array
        image_name: T√™n ·∫£nh ƒë·ªÉ x√°c ƒë·ªãnh ki·ªÉu MIME
        
    Returns:
        Tuple (chu·ªói base64, ki·ªÉu MIME)
    """
    # N·∫øu l√† numpy array (t·ª´ OpenCV), chuy·ªÉn th√†nh PIL Image
    if isinstance(image, (list, tuple, bytes, bytearray)):
        # ƒê√£ l√† bytes ho·∫∑c bytearray
        img_bytes = image
    elif hasattr(image, 'shape'):  # Numpy array
        img_pil = Image.fromarray(image)
        buf = io.BytesIO()
        img_pil.save(buf, format='JPEG')
        img_bytes = buf.getvalue()
    else:  # PIL Image
        buf = io.BytesIO()
        image.save(buf, format='JPEG')
        img_bytes = buf.getvalue()
        
    # Encode base64
    base64_encoded = base64.b64encode(img_bytes).decode('utf-8')
    mime_type = detect_image_type(image_name)
    
    return base64_encoded, mime_type

def analyze_frames_with_nova(frames, prompt: str, temperature: float, top_p: float, top_k: int, max_tokens: int):
    """
    Uses Amazon Nova on AWS Bedrock to analyze video frames and count different types of products.
    
    Args:
        frames: List of video frames to analyze
        prompt: Custom prompt for Nova
        temperature: Temperature setting (0-1)
        top_p: Top-p setting (0-1)
        top_k: Top-k setting
        max_tokens: Maximum tokens in response
        
    Returns:
        Nova's analysis of the video frame content
    """
    
    # Create placeholder for loading indicator
    with st.spinner("Nova ƒëang ph√¢n t√≠ch h√¨nh ·∫£nh..."):
        # System prompt
        system_list = [
            {
                "text": "You are an expert at analyzing product images and videos. You can identify different types of products, count them, and describe their key features."
            }
        ]
        
        # Prepare user message with images and text prompt
        user_content = []
        
        # Add images to user content
        for i, frame in enumerate(frames):
            # Encode to base64
            if isinstance(frame, tuple):
                # T·ª´ video frames (tuple c·ªßa index v√† frame)
                _, frame_img = frame
            else:
                # Tr·ª±c ti·∫øp t·ª´ h√¨nh ·∫£nh
                frame_img = frame
                
            # Encode to base64
            image_data, mime_type = image_to_base64(frame_img, f"image_{i}.jpg")
            
            # Add image to user content
            user_content.append({
                "image": {
                    "format": mime_type,
                    "source": {"bytes": image_data}
                }
            })
        
        # Add text prompt to user content
        user_content.append({"text": prompt})
        
        # Create message list
        message_list = [
            {
                "role": "user",
                "content": user_content
            }
        ]
        
        # Configure inference parameters
        inf_params = {
            "maxTokens": max_tokens,
            "topP": top_p,
            "topK": top_k,
            "temperature": temperature
        }
        
        # Prepare the request payload for Nova on Bedrock
        payload = {
            "schemaVersion": "messages-v1",
            "messages": message_list,
            "system": system_list,
            "inferenceConfig": inf_params
        }
        
        try:
            # Create a Bedrock Runtime client
            # S·ª≠ d·ª•ng region m·∫∑c ƒë·ªãnh v√† credentials t·ª´ m√¥i tr∆∞·ªùng
            bedrock_runtime = boto3.client(
                service_name="bedrock-runtime",
                region_name=DEFAULT_REGION
            )
            
            # Invoke the model on Bedrock
            response = bedrock_runtime.invoke_model(
                modelId=get_model_id(ModelType.NOVA),
                body=json.dumps(payload)
            )
            
            # Parse and return the response
            response_body = json.loads(response["body"].read())
            
            # Extract text content from Nova's response
            content_text = response_body["output"]["message"]["content"][0]["text"]
            return content_text
        
        except ClientError as e:
            return f"L·ªói khi g·ªçi Bedrock model: {str(e)}"
        except Exception as e:
            return f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {str(e)}"

def analyze_frames_with_claude(frames, prompt: str, temperature: float, top_p: float, top_k: int, max_tokens: int, model_type: ModelType):
    """
    Uses Claude models on AWS Bedrock to analyze video frames and count different types of products.
    
    Args:
        frames: List of video frames or images to analyze
        prompt: Custom prompt for Claude
        temperature: Temperature setting (0-1)
        top_p: Top-p setting (0-1)
        top_k: Top-k setting
        max_tokens: Maximum tokens in response
        model_type: Type of Claude model to use
        
    Returns:
        Claude's analysis of the video frame content
    """
    
    model_name = model_type.value
    with st.spinner(f"{model_name} ƒëang ph√¢n t√≠ch h√¨nh ·∫£nh..."):
        images = []
        for i, frame in enumerate(frames):
            if isinstance(frame, tuple):
                _, frame_img = frame
            else:
                frame_img = frame
            
            image_data, mime_type = image_to_base64(frame_img, f"image_{i}.jpg")
                
            images.append({
                "type": "image",
                "source": {
                    "type": "base64",
                    "media_type": f"image/{mime_type}",
                    "data": image_data
                }
            })
        
        message_content = images + [{"type": "text", "text": prompt}]
        
        payload = {
            "anthropic_version": "bedrock-2023-05-31",
            "max_tokens": max_tokens,
            "temperature": temperature,
            "top_p": top_p,
            "top_k": top_k,
            "messages": [
                {
                    "role": "user",
                    "content": message_content
                }
            ]
        }
        
        try:
            bedrock_runtime = boto3.client(
                service_name="bedrock-runtime",
                region_name=DEFAULT_REGION
            )
            
            response = bedrock_runtime.invoke_model(
                modelId=get_model_id(model_type),
                body=json.dumps(payload)
            )
            
            response_body = json.loads(response["body"].read())
            return response_body["content"][0]["text"]
        
        except ClientError as e:
            return f"L·ªói khi g·ªçi Bedrock model: {str(e)}"
        except Exception as e:
            return f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {str(e)}"
        
def display_results_as_table(result_text):
    """
    Chuy·ªÉn ƒë·ªïi k·∫øt qu·∫£ JSON th√†nh b·∫£ng Pandas v√† hi·ªÉn th·ªã trong Streamlit
    
    Args:
        result_text: VƒÉn b·∫£n k·∫øt qu·∫£ t·ª´ model (d·∫°ng JSON)
    
    Returns:
        DataFrame: Pandas DataFrame ƒë∆∞·ª£c t·∫°o t·ª´ JSON n·∫øu th√†nh c√¥ng, None n·∫øu th·∫•t b·∫°i
    """
    try:
        json_start = result_text.find('[')
        json_end = result_text.rfind(']') + 1
        
        if json_start >= 0 and json_end > json_start:
            json_str = result_text[json_start:json_end]
            data = json.loads(json_str)
            
            df = pd.DataFrame(data)
            
            return df
        else:
            st.error("Kh√¥ng t√¨m th·∫•y JSON h·ª£p l·ªá trong k·∫øt qu·∫£")
            return None
    except json.JSONDecodeError:
        st.error("Kh√¥ng th·ªÉ parse JSON t·ª´ k·∫øt qu·∫£. ƒê·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá.")
        return None
    except Exception as e:
        st.error(f"L·ªói khi chuy·ªÉn ƒë·ªïi k·∫øt qu·∫£ th√†nh b·∫£ng: {str(e)}")
        return None

def main():
    st.title("Ph√¢n T√≠ch Video/·∫¢nh S·∫£n Ph·∫©m V·ªõi Bedrock")
    
    st.info("""
    ·ª®ng d·ª•ng n√†y s·ª≠ d·ª•ng Amazon Nova v√† Claude tr√™n AWS Bedrock ƒë·ªÉ ph√¢n t√≠ch video ho·∫∑c h√¨nh ·∫£nh s·∫£n ph·∫©m.
    T·∫£i l√™n video/h√¨nh ·∫£nh v√† ch·ªçn ph∆∞∆°ng ph√°p ph√¢n t√≠ch ƒë·ªÉ nh·∫≠n k·∫øt qu·∫£.
    """)
    
    st.sidebar.title("C·∫•u h√¨nh")
    
    # Model selection
    st.sidebar.subheader("Ch·ªçn Model")
    selected_model = st.sidebar.radio(
        "Model:",
        options=[ModelType.NOVA, ModelType.CLAUDE_3_7_SONNET, ModelType.CLAUDE_4_SONNET, ModelType.CLAUDE_4_OPUS],
        format_func=lambda x: x.value
    )
    
    st.sidebar.subheader("Tham S·ªë Model")
    
    temperature = st.sidebar.slider(
        "Temperature:", 
        min_value=0.0,
        max_value=1.0,
        value=DEFAULT_TEMPERATURE,
        step=0.05,
        help="Ki·ªÉm so√°t m·ª©c ƒë·ªô ng·∫´u nhi√™n trong ƒë·∫ßu ra. Gi√° tr·ªã 0 s·∫Ω cho k·∫øt qu·∫£ nh·∫•t qu√°n, gi√° tr·ªã cao h∆°n t·∫°o nhi·ªÅu bi·∫øn th·ªÉ."
    )
    
    top_p = st.sidebar.slider(
        "Top P:",
        min_value=0.0,
        max_value=1.0,
        value=DEFAULT_TOP_P,
        step=0.05,
        help="Ki·ªÉm so√°t ƒëa d·∫°ng th√¥ng qua nucleus sampling. 1.0 = kh√¥ng h·∫°n ch·∫ø, 0.5 = ch·ªâ xem x√©t tokens trong top 50% x√°c su·∫•t."
    )
    
    top_k = st.sidebar.slider(
        "Top K:",
        min_value=0,
        max_value=500,
        value=DEFAULT_TOP_K,
        step=10,
        help="Gi·ªõi h·∫°n s·ªë tokens ƒë∆∞·ª£c xem x√©t khi t·∫°o ƒë·∫ßu ra. 0 = kh√¥ng s·ª≠ d·ª•ng top_k."
    )
    
    max_tokens = st.sidebar.slider(
        "Max Tokens:",
        min_value=100,
        max_value=10000,
        value=DEFAULT_MAX_TOKENS,
        step=100,
        help="ƒê·ªô d√†i t·ªëi ƒëa c·ªßa ph·∫£n h·ªìi ƒë∆∞·ª£c t·∫°o ra."
    )
    
    st.sidebar.subheader("T√πy Ch·ªânh Prompt")
    
    use_custom_prompt = st.sidebar.checkbox("S·ª≠ d·ª•ng prompt t√πy ch·ªânh", value=False)
    
    if use_custom_prompt:
        prompt = st.sidebar.text_area("Nh·∫≠p prompt c·ªßa b·∫°n:", DEFAULT_PROMPT, height=300)
    else:
        prompt = DEFAULT_PROMPT
        st.sidebar.markdown("*ƒêang s·ª≠ d·ª•ng prompt m·∫∑c ƒë·ªãnh*")
    
    input_type = st.radio(
        "Ch·ªçn lo·∫°i ƒë·∫ßu v√†o:",
        [InputType.VIDEO, InputType.IMAGE]
    )
    
    if input_type == InputType.VIDEO:
        st.subheader("T·∫£i l√™n video s·∫£n ph·∫©m")
        uploaded_video = st.file_uploader(
            "Ch·ªçn file video (MP4, MOV, AVI, etc.)",
            type=["mp4", "mov", "avi", "mkv", "wmv"],
            key="video_uploader"
        )
        
        st.subheader("C√†i ƒë·∫∑t tr√≠ch xu·∫•t frames")
        
        extraction_method = st.radio(
            "Ph∆∞∆°ng ph√°p tr√≠ch xu·∫•t frames:",
            ["ƒê·ªÅu ƒë·∫∑n theo s·ªë l∆∞·ª£ng", "Theo kho·∫£ng th·ªùi gian", "T·ª± ƒë·ªông ph√°t hi·ªán keyframes"]
        )
        
        if extraction_method == "ƒê·ªÅu ƒë·∫∑n theo s·ªë l∆∞·ª£ng":
            num_frames = st.slider(
                "S·ªë l∆∞·ª£ng frames c·∫ßn tr√≠ch xu·∫•t:",
                min_value=5,
                max_value=100,
                value=20,
                step=1
            )
        elif extraction_method == "Theo kho·∫£ng th·ªùi gian":
            interval_seconds = st.slider(
                "Kho·∫£ng th·ªùi gian gi·ªØa c√°c frames (gi√¢y):",
                min_value=0.5,
                max_value=10.0,
                value=2.0,
                step=0.5
            )
        else:  
            threshold = st.slider(
                "Ng∆∞·ª°ng ph√°t hi·ªán keyframes:",
                min_value=0.01,
                max_value=0.5,
                value=0.1,
                step=0.01,
                help="Gi√° tr·ªã c√†ng th·∫•p, c√†ng nhi·ªÅu frames ƒë∆∞·ª£c ph√°t hi·ªán"
            )
            max_keyframes = st.slider(
                "S·ªë l∆∞·ª£ng keyframes t·ªëi ƒëa:",
                min_value=5,
                max_value=30,
                value=15,
                step=1
            )
        
        if uploaded_video:
            st.video(uploaded_video)
            
            if st.button("Tr√≠ch xu·∫•t frames v√† ph√¢n t√≠ch", type="primary", key="analyze_video_btn"):
                video_processor = VideoProcessor(uploaded_video)
                video_info = video_processor.get_video_info()
                
                st.subheader("Th√¥ng tin video")
                st.write(f"T√™n file: {video_info['filename']}")
                st.write(f"ƒê·ªô ph√¢n gi·∫£i: {video_info['resolution'][0]} x {video_info['resolution'][1]}")
                st.write(f"FPS: {video_info['fps']:.2f}")
                st.write(f"Th·ªùi l∆∞·ª£ng: {video_info['duration']:.2f} gi√¢y")
                st.write(f"T·ªïng s·ªë frames: {video_info['frame_count']}")
                
                with st.spinner("ƒêang tr√≠ch xu·∫•t frames t·ª´ video..."):
                    if extraction_method == "ƒê·ªÅu ƒë·∫∑n theo s·ªë l∆∞·ª£ng":
                        frames = video_processor.extract_frames_uniform(num_frames)
                        st.write(f"ƒê√£ tr√≠ch xu·∫•t {len(frames)} frames ph√¢n b·ªë ƒë·ªÅu")
                    elif extraction_method == "Theo kho·∫£ng th·ªùi gian":
                        frames = video_processor.extract_frames_interval(interval_seconds)
                        st.write(f"ƒê√£ tr√≠ch xu·∫•t {len(frames)} frames (m·ªói {interval_seconds} gi√¢y)")
                    else:  
                        frames = video_processor.extract_frames_keyframes(threshold, max_keyframes)
                        st.write(f"ƒê√£ ph√°t hi·ªán v√† tr√≠ch xu·∫•t {len(frames)} keyframes")
                
                st.subheader("Frames ƒë√£ tr√≠ch xu·∫•t")
                
                extracted_frames = [(i, frame.image) for i, frame in enumerate(frames)]
                
                st.info(f"ƒê√£ tr√≠ch xu·∫•t {len(frames)} frames.")
                
                with st.expander("Xem chi ti·∫øt c√°c frames", expanded=False):
                    view_mode = st.radio(
                        "Ch·∫ø ƒë·ªô hi·ªÉn th·ªã:",
                        ["L∆∞·ªõi", "Danh s√°ch"],
                        key="video_view_mode"
                    )
                    
                    if view_mode == "L∆∞·ªõi":
                        num_cols = 4  
                        cols = st.columns(num_cols)
                        
                        for i, frame in enumerate(frames):
                            col_idx = i % num_cols
                            with cols[col_idx]:
                                st.image(
                                    frame.image, 
                                    caption=f"Frame {frame.frame_number} (t={frame.timestamp:.2f}s)", 
                                    use_column_width=True
                                )
                    else: 
                        frame_container = st.container()
                        for i, frame in enumerate(frames):
                            with frame_container.expander(f"Frame {frame.frame_number} (t={frame.timestamp:.2f}s)"):
                                st.image(frame.image, use_column_width=True)
                
                if extracted_frames:
                    if selected_model == ModelType.NOVA:
                        result = analyze_frames_with_nova(
                            extracted_frames, 
                            prompt, 
                            temperature, 
                            top_p, 
                            top_k, 
                            max_tokens
                        )
                    else: 
                        result = analyze_frames_with_claude(
                            extracted_frames, 
                            prompt, 
                            temperature, 
                            top_p, 
                            top_k, 
                            max_tokens,
                            selected_model
                        )
                    
                    st.subheader(f"K·∫øt qu·∫£ ph√¢n t√≠ch t·ª´ {selected_model.value}")
                    with st.expander("Xem k·∫øt qu·∫£ ph√¢n t√≠ch", expanded=False):
                        st.markdown(result)  
                                            
                    df = display_results_as_table(result)
                    if df is not None:
                        st.subheader("K·∫øt qu·∫£ d·∫°ng b·∫£ng")
                        
                        edited_df = st.data_editor(
                            df,
                            num_rows="dynamic",
                            use_container_width=True,
                            hide_index=True
                        )
                        
                        csv = edited_df.to_csv(index=False)
                        st.download_button(
                            label="T·∫£i b·∫£ng v·ªÅ (CSV)",
                            data=csv,
                            file_name="ket_qua_phan_tich.csv",
                            mime="text/csv"
                        )
                        
                        buffer = io.BytesIO()
                        with pd.ExcelWriter(buffer, engine='xlsxwriter') as writer:
                            edited_df.to_excel(writer, sheet_name='K·∫øt qu·∫£ ph√¢n t√≠ch', index=False)
                        buffer.seek(0)
                        
                        st.download_button(
                            label="T·∫£i b·∫£ng v·ªÅ (Excel)",
                            data=buffer,
                            file_name="ket_qua_phan_tich.xlsx",
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                        )
                    
                    st.download_button(
                        label="T·∫£i k·∫øt qu·∫£ v·ªÅ (TXT)",
                        data=result,
                        file_name="ket_qua_phan_tich.txt",
                        mime="text/plain"
                    )
                    
                    st.download_button(
                        label="T·∫£i prompt ƒë√£ s·ª≠ d·ª•ng (TXT)",
                        data=prompt,
                        file_name="prompt_da_su_dung.txt",
                        mime="text/plain"
                    )
        else:
            st.write("üëÜ H√£y t·∫£i l√™n video ƒë·ªÉ ph√¢n t√≠ch")
            
    else:
        st.subheader("T·∫£i l√™n h√¨nh ·∫£nh s·∫£n ph·∫©m")
        uploaded_images = st.file_uploader(
            "Ch·ªçn file h√¨nh ·∫£nh (JPG, PNG, etc.)",
            type=["jpg", "jpeg", "png", "bmp", "webp"],
            accept_multiple_files=True,
            key="image_uploader"
        )
        
        if uploaded_images:
            st.info(f"ƒê√£ t·∫£i l√™n {len(uploaded_images)} h√¨nh ·∫£nh.")
            
            st.subheader("H√¨nh ·∫£nh ƒë√£ t·∫£i l√™n")
            
            view_mode = st.radio(
                "Ch·∫ø ƒë·ªô hi·ªÉn th·ªã:",
                ["L∆∞·ªõi", "Danh s√°ch"],
                key="image_view_mode"
            )
            
            processed_images = []
            
            if view_mode == "L∆∞·ªõi":
                num_cols = 3 
                cols = st.columns(num_cols)
                
                for i, img_file in enumerate(uploaded_images):
                    col_idx = i % num_cols
                    with cols[col_idx]:
                        img = Image.open(img_file)
                        # ƒê·ªçc h√¨nh ·∫£nh
                        img = Image.open(img_file)
                        # Hi·ªÉn th·ªã h√¨nh ·∫£nh
                        st.image(img, caption=f"·∫¢nh {i+1}: {img_file.name}", use_column_width=True)
                        # Th√™m h√¨nh ·∫£nh v√†o danh s√°ch ƒë·ªÉ ph√¢n t√≠ch
                        processed_images.append(img)
            else:  # Danh s√°ch
                # T·∫°o container ƒë·ªÉ ƒë·∫∑t t·∫•t c·∫£ c√°c expander b√™n trong
                image_container = st.container()
                # Hi·ªÉn th·ªã theo danh s√°ch t·ª´ng ·∫£nh m·ªôt
                for i, img_file in enumerate(uploaded_images):
                    with image_container.expander(f"·∫¢nh {i+1}: {img_file.name}"):
                        img = Image.open(img_file)
                        st.image(img, use_column_width=True)
                        # Th√™m h√¨nh ·∫£nh v√†o danh s√°ch ƒë·ªÉ ph√¢n t√≠ch
                        processed_images.append(img)
            
            # Button ƒë·ªÉ ph√¢n t√≠ch c√°c h√¨nh ·∫£nh ƒë√£ t·∫£i l√™n
            if st.button("Ph√¢n t√≠ch h√¨nh ·∫£nh", type="primary", key="analyze_image_btn"):
                # Ph√¢n t√≠ch h√¨nh ·∫£nh b·∫±ng Nova ho·∫∑c Claude
                if processed_images:
                    if selected_model == ModelType.NOVA:
                        # Call Nova via AWS Bedrock
                        result = analyze_frames_with_nova(
                            processed_images, 
                            prompt, 
                            temperature, 
                            top_p, 
                            top_k, 
                            max_tokens
                        )
                    else:  # Claude
                        # Call Claude via AWS Bedrock
                        result = analyze_frames_with_claude(
                            processed_images, 
                            prompt, 
                            temperature, 
                            top_p, 
                            top_k, 
                            max_tokens
                        )
                    
                    # Display results
                    st.subheader(f"K·∫øt qu·∫£ ph√¢n t√≠ch t·ª´ {selected_model.value}")
                    # S·ª≠ d·ª•ng expander ƒë·ªÉ ·∫©n/hi·ªán k·∫øt qu·∫£
                    with st.expander("Xem k·∫øt qu·∫£ ph√¢n t√≠ch", expanded=False):
                        st.markdown(result)    

                    # Option to download as text file
                    df = display_results_as_table(result)
                    if df is not None:
                        st.subheader("K·∫øt qu·∫£ d·∫°ng b·∫£ng")
                        
                        # Th√™m t√πy ch·ªçn ch·ªânh s·ª≠a b·∫£ng n·∫øu c·∫ßn
                        edited_df = st.data_editor(
                            df,
                            num_rows="dynamic",
                            use_container_width=True,
                            hide_index=True
                        )
                        
                        # T·∫°o n√∫t t·∫£i xu·ªëng cho CSV
                        csv = edited_df.to_csv(index=False)
                        st.download_button(
                            label="T·∫£i b·∫£ng v·ªÅ (CSV)",
                            data=csv,
                            file_name="ket_qua_phan_tich.csv",
                            mime="text/csv"
                        )
                        
                        # T√πy ch·ªçn t·∫°o Excel
                        buffer = io.BytesIO()
                        with pd.ExcelWriter(buffer, engine='xlsxwriter') as writer:
                            edited_df.to_excel(writer, sheet_name='K·∫øt qu·∫£ ph√¢n t√≠ch', index=False)
                        buffer.seek(0)
                        
                        st.download_button(
                            label="T·∫£i b·∫£ng v·ªÅ (Excel)",
                            data=buffer,
                            file_name="ket_qua_phan_tich.xlsx",
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                        )
                    
                    # Option to download as text file v·∫´n gi·ªØ l·∫°i
                    st.download_button(
                        label="T·∫£i k·∫øt qu·∫£ v·ªÅ (TXT)",
                        data=result,
                        file_name="ket_qua_phan_tich.txt",
                        mime="text/plain"
                    )
                    
                    # Save prompt used for reference
                    st.download_button(
                        label="T·∫£i prompt ƒë√£ s·ª≠ d·ª•ng (TXT)",
                        data=prompt,
                        file_name="prompt_da_su_dung.txt",
                        mime="text/plain"
                    )
        else:
            st.write("üëÜ H√£y t·∫£i l√™n h√¨nh ·∫£nh ƒë·ªÉ ph√¢n t√≠ch")

if __name__ == "__main__":
    main()